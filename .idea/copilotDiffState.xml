<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/smarthomeui/smarthome/ui/adapter/DeviceAdminAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/smarthomeui/smarthome/ui/adapter/DeviceAdminAdapter.java" />
              <option name="originalContent" value="package com.example.smarthomeui.smarthome.ui.adapter;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.Switch;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.smarthomeui.R;&#10;import com.example.smarthomeui.smarthome.model.Device;&#10;import com.example.smarthomeui.smarthome.ui.activity.DeviceManagementActivity;&#10;import java.util.List;&#10;&#10;/**&#10; * DeviceAdminAdapter&#10; * Adapter cho RecyclerView hiển thị danh sách thiết bị trong chế độ admin&#10; */&#10;public class DeviceAdminAdapter extends RecyclerView.Adapter&lt;DeviceAdminAdapter.DeviceViewHolder&gt; {&#10;&#10;    private List&lt;Device&gt; deviceList;&#10;    private Context context;&#10;    private DeviceManagementActivity activity;&#10;&#10;    public DeviceAdminAdapter(List&lt;Device&gt; deviceList, DeviceManagementActivity activity) {&#10;        this.deviceList = deviceList;&#10;        this.activity = activity;&#10;        this.context = activity;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public DeviceViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_device_admin, parent, false);&#10;        return new DeviceViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull DeviceViewHolder holder, int position) {&#10;        Device device = deviceList.get(position);&#10;&#10;        holder.tvDeviceName.setText(device.getName());&#10;        holder.tvDeviceRoom.setText(device.getRoom());&#10;        holder.tvDeviceId.setText(&quot;ID: &quot; + device.getId());&#10;        holder.tvDeviceType.setText(device.getType());&#10;        holder.tvPowerConsumption.setText(device.getPowerConsumption());&#10;        holder.tvLastActivity.setText(device.getLastActivity());&#10;        holder.tvDeviceStatus.setText(device.getStatus());&#10;        holder.tvDeviceValue.setText(device.getValueText());&#10;&#10;        // Set status color&#10;        int statusColor = device.isOnline() ?&#10;            context.getColor(R.color.green) :&#10;            context.getColor(R.color.red);&#10;        holder.tvDeviceStatus.getBackground().setTint(statusColor);&#10;&#10;        // Set device switch&#10;        holder.switchDevicePower.setChecked(device.isOnline());&#10;        holder.switchDevicePower.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            activity.toggleDevice(device, isChecked);&#10;        });&#10;&#10;        // Set click listeners&#10;        holder.btnEditDevice.setOnClickListener(v -&gt; activity.editDevice(device));&#10;        holder.btnDeleteDevice.setOnClickListener(v -&gt; activity.deleteDevice(device));&#10;&#10;        // Set item click listener&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            // TODO: Open device detail activity&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return deviceList.size();&#10;    }&#10;&#10;    static class DeviceViewHolder extends RecyclerView.ViewHolder {&#10;        ImageView imgDeviceIcon, btnEditDevice, btnDeleteDevice;&#10;        TextView tvDeviceName, tvDeviceRoom, tvDeviceId, tvDeviceType,&#10;                 tvPowerConsumption, tvLastActivity, tvDeviceStatus, tvDeviceValue;&#10;        Switch switchDevicePower;&#10;&#10;        DeviceViewHolder(View itemView) {&#10;            super(itemView);&#10;            imgDeviceIcon = itemView.findViewById(R.id.imgDeviceIcon);&#10;            tvDeviceName = itemView.findViewById(R.id.tvDeviceName);&#10;            tvDeviceRoom = itemView.findViewById(R.id.tvDeviceRoom);&#10;            tvDeviceId = itemView.findViewById(R.id.tvDeviceId);&#10;            tvDeviceType = itemView.findViewById(R.id.tvDeviceType);&#10;            tvPowerConsumption = itemView.findViewById(R.id.tvPowerConsumption);&#10;            tvLastActivity = itemView.findViewById(R.id.tvLastActivity);&#10;            tvDeviceStatus = itemView.findViewById(R.id.tvDeviceStatus);&#10;            tvDeviceValue = itemView.findViewById(R.id.tvDeviceValue);&#10;            switchDevicePower = itemView.findViewById(R.id.switchDevicePower);&#10;            btnEditDevice = itemView.findViewById(R.id.btnEditDevice);&#10;            btnDeleteDevice = itemView.findViewById(R.id.btnDeleteDevice);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.smarthomeui.smarthome.ui.adapter;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.Switch;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.smarthomeui.R;&#10;import com.example.smarthomeui.smarthome.model.Device;&#10;import com.example.smarthomeui.smarthome.ui.activity.DeviceManagementActivity;&#10;import java.util.List;&#10;&#10;/**&#10; * DeviceAdminAdapter&#10; * Adapter cho RecyclerView hiển thị danh sách thiết bị trong chế độ admin&#10; */&#10;public class DeviceAdminAdapter extends RecyclerView.Adapter&lt;DeviceAdminAdapter.DeviceViewHolder&gt; {&#10;&#10;    private List&lt;Device&gt; deviceList;&#10;    private Context context;&#10;    private DeviceManagementActivity activity;&#10;&#10;    public DeviceAdminAdapter(List&lt;Device&gt; deviceList, DeviceManagementActivity activity) {&#10;        this.deviceList = deviceList;&#10;        this.activity = activity;&#10;        this.context = activity;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public DeviceViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_device_admin, parent, false);&#10;        return new DeviceViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull DeviceViewHolder holder, int position) {&#10;        Device device = deviceList.get(position);&#10;&#10;        holder.tvDeviceName.setText(device.getName());&#10;        holder.tvDeviceRoom.setText(device.getRoom());&#10;        holder.tvDeviceId.setText(&quot;ID: &quot; + device.getId());&#10;        holder.tvDeviceType.setText(device.getType());&#10;        holder.tvPowerConsumption.setText(device.getPowerConsumption());&#10;        holder.tvLastActivity.setText(device.getLastActivity());&#10;        holder.tvDeviceStatus.setText(device.getStatus());&#10;        holder.tvDeviceValue.setText(device.getValueText());&#10;&#10;        // Set status color&#10;        int statusColor = device.isOnline() ?&#10;            context.getColor(R.color.green) :&#10;            context.getColor(R.color.red);&#10;        holder.tvDeviceStatus.getBackground().setTint(statusColor);&#10;&#10;        // Set device switch&#10;        holder.switchDevicePower.setChecked(device.isOnline());&#10;        holder.switchDevicePower.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            activity.toggleDevice(device, isChecked);&#10;        });&#10;&#10;        // Set click listeners&#10;        holder.btnEditDevice.setOnClickListener(v -&gt; activity.editDevice(device));&#10;        holder.btnDeleteDevice.setOnClickListener(v -&gt; activity.deleteDevice(device));&#10;&#10;        // Set item click listener&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            // TODO: Open device detail activity&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return deviceList.size();&#10;    }&#10;&#10;    static class DeviceViewHolder extends RecyclerView.ViewHolder {&#10;        ImageView imgDeviceIcon, btnEditDevice, btnDeleteDevice;&#10;        TextView tvDeviceName, tvDeviceRoom, tvDeviceId, tvDeviceType,&#10;                 tvPowerConsumption, tvLastActivity, tvDeviceStatus, tvDeviceValue;&#10;        Switch switchDevicePower;&#10;&#10;        DeviceViewHolder(View itemView) {&#10;            super(itemView);&#10;            imgDeviceIcon = itemView.findViewById(R.id.imgDeviceIcon);&#10;            tvDeviceName = itemView.findViewById(R.id.tvDeviceName);&#10;            tvDeviceRoom = itemView.findViewById(R.id.tvDeviceRoom);&#10;            tvDeviceId = itemView.findViewById(R.id.tvDeviceId);&#10;            tvDeviceType = itemView.findViewById(R.id.tvDeviceType);&#10;            tvPowerConsumption = itemView.findViewById(R.id.tvPowerConsumption);&#10;            tvLastActivity = itemView.findViewById(R.id.tvLastActivity);&#10;            tvDeviceStatus = itemView.findViewById(R.id.tvDeviceStatus);&#10;            tvDeviceValue = itemView.findViewById(R.id.tvDeviceValue);&#10;            switchDevicePower = itemView.findViewById(R.id.switchDevicePower);&#10;            btnEditDevice = itemView.findViewById(R.id.btnEditDevice);&#10;            btnDeleteDevice = itemView.findViewById(R.id.btnDeleteDevice);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>